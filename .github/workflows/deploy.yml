# .github/workflows/your-workflow-name.yml

name: Frontend CI/CD - Deploy Vite to EC2

on:
  push:
    branches:
      - master
      - develop
  pull_request:
    branches:
      - master
      - develop

permissions:
  contents: write # Needed for git tag push

jobs:
  deploy-frontend:
    name: Build & Deploy Vite App to EC2
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
        with:
          # Fetch all history for version bumping based on tags
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          # Cache npm dependencies based on package-lock.json
          cache: 'npm'

      # === IMPORTANT STEP ===
      # Installs ALL dependencies, including devDependencies, because NODE_ENV=development
      # If 'vite' is missing from devDependencies in the committed package.json,
      # it won't be installed here, causing the build step to fail.
      - name: Install Dependencies (Include devDependencies)
        run: npm ci # Using npm ci is generally recommended for CI for faster, cleaner installs
        # run: npm install # Or stick with npm install if you prefer
        env:
          NODE_ENV: development

      # Set NODE_ENV for subsequent steps like build
      - name: Set NODE_ENV to production
        run: echo "NODE_ENV=production" >> $GITHUB_ENV

      # Version bumping logic (only runs on master branch pushes)
      - name: Determine and Bump Version
        id: versioning
        # Only run this step for pushes to the master branch
        if: github.event_name == 'push' && github.ref == 'refs/heads/master'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git fetch --tags --force # Ensure all tags are fetched
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          echo "Latest tag: $LATEST_TAG"

          # Simple patch version bump (adjust logic if needed)
          if [[ $LATEST_TAG =~ ^v([0-9]+)\.([0-9]+)\.([0-9]+)$ ]]; then
            MAJOR=${BASH_REMATCH[1]}
            MINOR=${BASH_REMATCH[2]}
            PATCH=${BASH_REMATCH[3]}
            PATCH=$((PATCH + 1))
            NEW_TAG="v${MAJOR}.${MINOR}.${PATCH}"
          else
            # Set initial version if no tags found or format is unexpected
            NEW_TAG="v1.0.0"
          fi

          echo "New tag: $NEW_TAG"
          # Set outputs for use in other steps
          echo "new_tag=$NEW_TAG" >> $GITHUB_OUTPUT
          # Set environment variable for this job
          echo "VERSION=$NEW_TAG" >> $GITHUB_ENV

          # Configure git for tagging
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          # Create and push the new tag
          git tag $NEW_TAG
          git push origin $NEW_TAG

      # Inject version into build if VERSION is set (primarily for master branch)
      # For develop branch, VERSION might not be set, consider a default/placeholder
      - name: Inject Version into Build
        if: env.VERSION != ''
        run: |
          echo "VITE_APP_VERSION=${{ env.VERSION }}" >> .env.production

      # === THE FAILING STEP ===
      # This step fails if 'vite' was not installed by 'npm ci'/'npm install'
      - name: Build Project Using Vite
        run: npx vite build
        env:
          # Ensure NODE_ENV is production for the build itself
          NODE_ENV: production

      # Deployment steps (only run on pushes, not pull requests)
      - name: Prepare Remote Folder
        if: github.event_name == 'push' # Only deploy on push events
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_KEY }}
          script: |
            # Use 'develop' as fallback version name if VERSION env var isn't set
            mkdir -p /tmp/vite-deploy/releases/${{ env.VERSION || 'develop' }}

      - name: Upload Build to EC2
        if: github.event_name == 'push' # Only deploy on push events
        uses: appleboy/scp-action@master # Consider pinning to a specific version like @v0.1.4
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_KEY }}
          source: "dist/" # Upload the entire dist directory
          target: "/tmp/vite-deploy/releases/${{ env.VERSION || 'develop' }}"
          strip_components: 1 # Removes the 'dist' folder itself during copy

      - name: Activate New Build (Blue-Green)
        if: github.event_name == 'push' # Only deploy on push events
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_KEY }}
          script: |
            RELEASE_NAME=${{ env.VERSION || 'develop' }}
            RELEASE_PATH="/tmp/vite-deploy/releases/$RELEASE_NAME"
            LIVE_PATH="/var/www/html"
            OLD_PATH="/var/www/html-old"

            echo "Activating release: $RELEASE_NAME"

            # Ensure release directory exists before proceeding
            if [ ! -d "$RELEASE_PATH" ]; then
              echo "Error: Release path $RELEASE_PATH does not exist."
              exit 1
            fi

            # Remove previous backup
            sudo rm -rf $OLD_PATH

            # Backup current live version if it exists
            if [ -d "$LIVE_PATH" ]; then
              sudo mv $LIVE_PATH $OLD_PATH
            fi

            # Move new release to live path
            sudo mv $RELEASE_PATH $LIVE_PATH

            # Restart nginx to apply changes
            sudo systemctl restart nginx

            echo "âœ… Deployed version $RELEASE_NAME"

      - name: Rollback Instructions
        if: always() && github.event_name == 'push' # Show always on push, even if previous steps fail
        run: |
          echo "---------------------"
          echo "ROLLBACK INSTRUCTIONS (if needed):"
          echo "SSH into EC2 (${{ secrets.EC2_HOST }}) and run:"
          echo "  sudo rm -rf /var/www/html"
          echo "  sudo mv /var/www/html-old /var/www/html"
          echo "  sudo systemctl restart nginx"
          echo "---------------------"